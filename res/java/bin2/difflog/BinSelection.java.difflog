# diffLog ver 0.3 charset=SJIS
# 2007/04/07 19:34:18 1.0
## before saved by ViVi
85a86,87
> 			for (int j = 0; j< INIT.length; j++) {
> 			}
# 2007/04/07 19:34:18 1.1
86c86,87
< 			for (int j = 0; j< INIT.length; j++) {
---
> 			C_BUF = new double [3];
> 			for (int j = 0; j< 3; j++) {
# 2007/04/07 19:35:04 1.2
87a88
> 				C_BUF = CostFunction(BINS[i]),j);
# 2007/04/07 19:36:04 1.3
88c88
< 				C_BUF = CostFunction(BINS[i]),j);
---
> 				C_BUF = CostFunction(BINS[i]),INIT);
# 2007/04/07 19:36:37 1.4
95c95
< 	public double CostFunction(double BIN) {
---
> 	public double CostFunction(double BIN, double INIT) {
# 2007/04/07 19:36:43 1.5
97c97
< 		double K[] = EventCount(BIN);
---
> 		double K[] = EventCount(BIN,INIT);
# 2007/04/07 19:36:57 1.6
57c57
< 		K_OPT = EventCount(BIN_OPT);
---
> 		K_OPT = EventCount(BIN_OPT,0);
# 2007/04/07 19:37:23 1.7
121c121
< 				if (DATA[j] >= DATA_MIN + BIN*i && DATA[j] < DATA_MIN + BIN*(i+1)) {
---
> 				if (DATA[j] >= INIT + DATA_MIN + BIN*i && DATA[j] < INIT + DATA_MIN + BIN*(i+1)) {
# 2007/04/07 19:37:49 1.8
114c114
< 	public double[] EventCount(double BIN) {
---
> 	public double[] EventCount(double BIN, double INIT) {
# 2007/04/07 19:37:57 1.9
87c87,88
< 			for (int j = 0; j< 3; j++) {
---
> 			for (int j = 1; j< 3; j++) {
> 				INIT = BINS[i] * j/3;
# 2007/04/07 19:38:41 1.10
89c89
< 				C_BUF = CostFunction(BINS[i]),INIT);
---
> 				C_BUF = CostFunction(BINS[i],INIT);
# 2007/04/07 19:38:56 1.11
91c91
< 			C[i] = CostFunction(BINS[i]);
---
> 			//C[i] = CostFunction(BINS[i]);
# 2007/04/07 19:39:10 1.12
87c87
< 			for (int j = 1; j< 3; j++) {
---
> 			for (int j = 0; j< 3; j++) {
89c89
< 				C_BUF = CostFunction(BINS[i],INIT);
---
> 				C_BUF[j] = CostFunction(BINS[i],INIT);
# 2007/04/07 19:39:18 1.13
89c89
< 				C_BUF[j] = CostFunction(BINS[i],INIT);
---
> 				C_BUF = + CostFunction(BINS[i],INIT);
# 2007/04/07 19:39:35 1.14
89c89
< 				C_BUF = + CostFunction(BINS[i],INIT);
---
> 				C_BUF = C_BUF + CostFunction(BINS[i],INIT);
# 2007/04/07 19:39:42 1.15
91c91
< 			//C[i] = CostFunction(BINS[i]);
---
> 			C[i] = C_BUF/3; //CostFunction(BINS[i]);
# 2007/04/07 19:39:56 1.16
91c91
< 			C[i] = C_BUF/3; //CostFunction(BINS[i]);
---
> 			C[i] = C_BUF / 3; //CostFunction(BINS[i]);
# 2007/04/07 19:40:01 1.17
86c86
< 			C_BUF = new double [3];
---
> 			double C_BUF =0;
# 2007/04/07 19:40:19 1.18
86c86
< 			double C_BUF =0;
---
> 			double C_BUF = 0;
# 2007/04/07 19:40:41 1.19
84a85
> 		
# 2007/04/07 19:41:22 1.20
85d84
< 		
# 2007/04/07 19:41:32 1.21
88c88
< 				INIT = BINS[i] * j/3;
---
> 				INIT = 0;//BINS[i] * j/3;
# 2007/04/07 19:42:13 1.22
89c89
< 				C_BUF = C_BUF + CostFunction(BINS[i],INIT);
---
> 				C_BUF =+ CostFunction(BINS[i],INIT);
# 2007/04/07 19:42:28 1.23
89c89
< 				C_BUF =+ CostFunction(BINS[i],INIT);
---
> 				C_BUF = CostFunction(BINS[i],INIT);
# 2007/04/07 19:42:29 1.24
88c88
< 				INIT = 0;//BINS[i] * j/3;
---
> 				double INIT = 0;//BINS[i] * j/3;
# 2007/04/07 19:42:44 1.25
89c89
< 				C_BUF = CostFunction(BINS[i],INIT);
---
> 				C_BUF = C_BUF + CostFunction(BINS[i],INIT);
# 2007/04/07 19:42:58 1.26
89c89
< 				C_BUF = C_BUF + CostFunction(BINS[i],INIT);
---
> 				C_BUF = C_BUF + CostFunction(BINS[i],BINS[i]*j/3);
# 2007/04/07 19:43:18 1.27
89c89
< 				C_BUF = C_BUF + CostFunction(BINS[i],BINS[i]*j/3);
---
> 				C_BUF = C_BUF + CostFunction(BINS[i],BINS[i]*(double)j/3);
# 2007/04/07 19:43:28 1.28
88d87
< 				double INIT = 0;//BINS[i] * j/3;
# 2007/04/07 19:43:41 1.29
87c87
< 			for (int j = 0; j< 3; j++) {
---
> 			for (int j = 0; j< 6; j++) {
90c90
< 			C[i] = C_BUF / 3; //CostFunction(BINS[i]);
---
> 			C[i] = C_BUF / 6; //CostFunction(BINS[i]);
# 2007/04/07 19:45:25 1.30
87c87
< 			for (int j = 0; j< 6; j++) {
---
> 			for (int j = 0; j< 3; j++) {
90c90
< 			C[i] = C_BUF / 6; //CostFunction(BINS[i]);
---
> 			C[i] = C_BUF / 3; //CostFunction(BINS[i]);
# 2007/04/07 20:01:50 1.31
88c88
< 				C_BUF = C_BUF + CostFunction(BINS[i],BINS[i]*(double)j/3);
---
> 				C_BUF = C_BUF + CostFunction(BINS[i],BINS[i]*(double)j/6);
# 2007/04/07 20:02:45 1.32
88c88
< 				C_BUF = C_BUF + CostFunction(BINS[i],BINS[i]*(double)j/6);
---
> 				C_BUF = C_BUF + CostFunction(BINS[i],BINS[i]*(double)(j-3)/6);
# 2007/04/07 20:19:26 1.33
87c87
< 			for (int j = 0; j< 3; j++) {
---
> 			for (int j = 0; j< 6; j++) {
# 2007/04/07 20:20:00 1.34
90c90
< 			C[i] = C_BUF / 3; //CostFunction(BINS[i]);
---
> 			C[i] = C_BUF / 6; //CostFunction(BINS[i]);
# 2007/04/07 20:20:04 1.35
87c87
< 			for (int j = 0; j< 6; j++) {
---
> 			for (int j = 0; j< 5; j++) {
90c90
< 			C[i] = C_BUF / 6; //CostFunction(BINS[i]);
---
> 			C[i] = C_BUF / 5; //CostFunction(BINS[i]);
# 2007/04/07 20:20:32 1.36
88c88
< 				C_BUF = C_BUF + CostFunction(BINS[i],BINS[i]*(double)(j-3)/6);
---
> 				C_BUF = C_BUF + CostFunction(BINS[i],BINS[i]*(double)(j-3)/5);
# 2007/04/07 20:20:53 1.37
87,88c87,88
< 			for (int j = 0; j< 5; j++) {
< 				C_BUF = C_BUF + CostFunction(BINS[i],BINS[i]*(double)(j-3)/5);
---
> 			for (int j = 0; j< 6; j++) {
> 				C_BUF = C_BUF + CostFunction(BINS[i],BINS[i]*(double)(j-3)/6);
90c90
< 			C[i] = C_BUF / 5; //CostFunction(BINS[i]);
---
> 			C[i] = C_BUF / 6; //CostFunction(BINS[i]);
# 2007/04/07 20:21:03 1.38
87,88c87,88
< 			for (int j = 0; j< 6; j++) {
< 				C_BUF = C_BUF + CostFunction(BINS[i],BINS[i]*(double)(j-3)/6);
---
> 			for (int j = 0; j< 10; j++) {
> 				C_BUF = C_BUF + CostFunction(BINS[i],BINS[i]*(double)(j-5)/10);
90c90
< 			C[i] = C_BUF / 6; //CostFunction(BINS[i]);
---
> 			C[i] = C_BUF / 10; //CostFunction(BINS[i]);
# 2007/04/07 20:24:16 1.39
87,88c87,88
< 			for (int j = 0; j< 10; j++) {
< 				C_BUF = C_BUF + CostFunction(BINS[i],BINS[i]*(double)(j-5)/10);
---
> 			for (int j = 0; j< 20; j++) {
> 				C_BUF = C_BUF + CostFunction(BINS[i],BINS[i]*(double)(j-10)/20);
90c90
< 			C[i] = C_BUF / 10; //CostFunction(BINS[i]);
---
> 			C[i] = C_BUF / 20; //CostFunction(BINS[i]);
# 2007/04/07 20:26:55 1.40
87,88c87,88
< 			for (int j = 0; j< 20; j++) {
< 				C_BUF = C_BUF + CostFunction(BINS[i],BINS[i]*(double)(j-10)/20);
---
> 			for (int j = 0; j< 10; j++) {
> 				C_BUF = C_BUF + CostFunction(BINS[i],BINS[i]*(double)(j-5)/10);
90c90
< 			C[i] = C_BUF / 20; //CostFunction(BINS[i]);
---
> 			C[i] = C_BUF / 10; //CostFunction(BINS[i]);
# 2007/04/07 20:29:28 1.41
87,88c87,88
< 			for (int j = 0; j< 10; j++) {
< 				C_BUF = C_BUF + CostFunction(BINS[i],BINS[i]*(double)(j-5)/10);
---
> 			for (int j = 0; j< 11; j++) {
> 				C_BUF = C_BUF + CostFunction(BINS[i],BINS[i]*(double)(j-5)/11);
90c90
< 			C[i] = C_BUF / 10; //CostFunction(BINS[i]);
---
> 			C[i] = C_BUF / 11; //CostFunction(BINS[i]);
# 2007/04/07 20:32:22 1.42
88c88
< 				C_BUF = C_BUF + CostFunction(BINS[i],BINS[i]*(double)(j-5)/11);
---
> 				C_BUF = C_BUF + CostFunction(BINS[i],BINS[i]*(double)(j-5)/10);
# 2007/04/07 20:32:36 1.43
# latest

import java.awt.*;
import java.applet.*;

public class BinSelection extends Applet {

	/* 2006 Hideaki Shimazaki All rights reserved. 
	 * Department of Physics, Kyoto University
	 * Kyoto 606-8502, Japan
	 * email: shimazaki at jhu.edu
	 */
	
	private static final long serialVersionUID = -4092064318517205567L;
	static double DATA[];
	//static double K[];		//The number of events within a bin
	static double K_OPT[];
	static double BINS[];
	static double BIN_MAX = 0;
	static double BIN_MIN = 0;
	static int BINS_LEN;
	static int BINNUM;
	static double BIN_OPT;
	
	static double DATA_MIN; 
	static double DATA_MAX;
	static double N;
	static double C[];
	
 	public void init(Graphics g) {
 		setBackground(Color.white);
	} 	
 	
 	public void paint(Graphics g) {
	} 	
	
	public void InitParam(float data_N, float data_length, float bins_length, float data_max, float data_min) {
		DATA = new double [(int)data_length];
		BINS_LEN = (int) bins_length;
		BINS = new double [(int) bins_length];
		/*for (int i = 0; i < data.length; i++) {
			DATA[i] = (double)data[i];
		}*/ //Passing an array is applicable to NN. 
		
		N = (double)data_N;
		
		BINS = new double [(int)bins_length];
		
		DATA_MAX = (double)data_max;
		DATA_MIN = (double)data_min;
	}

	public double OutputC(int i) {
		return C[i];
	}
	
	public double OutputK(int i) {
		K_OPT = EventCount(BIN_OPT,0);
		return K_OPT[i];
	}
	
	public void InputDATA(int i, float data) {
		DATA[i] = data;
	}
	
	public void InputBINS(int i, float bin) {
		BINS[i] = (double)bin;
		BIN_MAX = Math.max(BIN_MAX, BINS[i]);
		BIN_MIN = Math.min(BIN_MIN, BINS[i]);
	}
	
	public double OptimalBinSize() {		//Output an optimal bin size
		double C_MIN = C[0];
		int IDX = 0;
		for (int i = 0; i < BINS.length; i++) {
			C_MIN = Math.min(C_MIN,C[i]);
			if (C_MIN == C[i]) {
				IDX = i;
			}
		}
		return BINS[IDX];
	}
	
	public void CostFunctionArray() {
		C = new double [BINS.length];
		for (int i = 0; i < BINS.length; i++) {
			double C_BUF = 0;
			for (int j = 0; j< 11; j++) {
				C_BUF = C_BUF + CostFunction(BINS[i],BINS[i]*(double)(j-5)/10);
			}
			C[i] = C_BUF / 11; //CostFunction(BINS[i]);
		}
		BIN_OPT = OptimalBinSize();
	}
	
	public double CostFunction(double BIN, double INIT) {
		BINNUM = (int)Math.floor((DATA_MAX - DATA_MIN)/BIN );
		double K[] = EventCount(BIN,INIT);
		
		double Kbar = 0;
		for (int i = 0; i < BINNUM; i++) {
			Kbar = Kbar + K[i]/BINNUM; 
		}
		
		double V = 0;
		for (int i = 0; i < BINNUM; i++) {
			V = V + Math.pow(K[i] - Kbar, 2)/BINNUM;
		}
		
		double c;
		c = ( 2*Kbar - V ) / Math.pow(N * BIN, 2);
		return c;
	}
	
	public double[] EventCount(double BIN, double INIT) {
		BINNUM = (int)Math.ceil((DATA_MAX - DATA_MIN)/BIN );
		
		double K[] = new double[BINNUM];
		for (int i = 0; i < BINNUM; i++) {
			K[i] = 0;
			for (int j = 0; j < DATA.length; j++) {
				if (DATA[j] >= INIT + DATA_MIN + BIN*i && DATA[j] < INIT + DATA_MIN + BIN*(i+1)) {
					K[i] = K[i] + 1;
				}
			}
		}
		return K;
	}
}